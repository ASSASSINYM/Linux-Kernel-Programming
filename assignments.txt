Assignments

-----------------------------------------------------------------------
Ch 1: 
-----------------------------------------------------------------------
1.1 Follow the full procedure, configure and build the 4.19.4 (or other) Linux
kernel for the x86_64.

1.2 Do the same for an embedded ARM-32 target (for example, for the Versatile
Express or the Raspberry Pi platform).

-----------------------------------------------------------------------
Ch 2:
-----------------------------------------------------------------------
2.1 : Write a simple 'Hello, world' kernel module, but have the 'init'
function return negative (say, -EINVAL). See what happens.

2.2 : Using the 'Hello, world' kernel module as a template, setup an LKM
that does not return any value in the init routine (tip: comment out the
'return' statement). What is the effect?

2.3 : Using the 'Hello, world' kernel module as a template, setup an LKM
that does not have an exit routine (tip: comment out the module_exit()). What
is the effect?


-----------------------------------------------------------------------
Ch 4:
-----------------------------------------------------------------------
4.1 : Write a kernel module, that, within it's init code, allocates slab
memory with the kmalloc() to an array of five pointers, i.e., each pointer
gets a kilobyte of slab memory, like this:

+-------+-------+-------+-------+-------+
|0  .   |1  .   |2  .   |3  .   |4  .   |
+---|---+---|---+---|---+---|---+---|---+
    v       v       v       v       v
   ---     ---     ---     ---     ---
   mem     mem     mem     mem     mem        <-- 1 KB each
   ---     ---     ---     ---     ---

Then, initialize the buffers to 'a's, 'b's, 'c's, 'd's and 'e's respectively.
In the cleanup code, free up the memory. Tip: take care to handle the error
case where a memory allocation fails - don't forget to free the allocations
already performed!


-----------------------------------------------------------------------
Ch _ :
-----------------------------------------------------------------------
_.1 : 
